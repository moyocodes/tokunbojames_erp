{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable import/prefer-default-export */\nimport { useState, useReducer } from 'react';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { LOGIN_URL } from 'url/auth/AuthUrl';\nimport { LOADING_STARTS, LOADING_STOPS } from 'types/LoadingTypes';\nimport { authReducers } from 'reducers/auth/authReducers';\n\nconst useAuth = () => {\n  _s();\n\n  const loginState = {\n    email: '',\n    password: ''\n  };\n  const [login, setLogin] = useState(loginState);\n  const [{\n    isLoading\n  }, dispatch] = useReducer(authReducers, {\n    isLoading: false\n  });\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setLogin({ ...login,\n      [name]: value\n    });\n  }; // eslint-disable-next-line consistent-return\n\n\n  const loginUser = async data => {\n    dispatch({\n      type: LOADING_STARTS\n    });\n\n    try {\n      const response = await axios.post(`${LOGIN_URL}`, data);\n\n      if (response.data.status === 'OK') {\n        sessionStorage.setItem('Bearer_token', response.data.data.token);\n        localStorage.setItem('Bearer_token', response.data.data.token);\n        toast.success('Logged in successfully');\n      }\n    } catch (e) {\n      if (e) {\n        dispatch({\n          type: LOADING_STOPS\n        });\n        toast.error('Something went wrong!');\n\n        if (e.response.data.message) {\n          dispatch({\n            type: LOADING_STOPS\n          });\n          toast.error(e.response.data.message);\n        }\n      }\n    }\n  };\n\n  return {\n    login,\n    onChange,\n    loginUser,\n    isLoading\n  };\n};\n\n_s(useAuth, \"BCJGJbsvR91wOS/90ZgkuPTsiu4=\");\n\nexport default useAuth;","map":{"version":3,"sources":["/Users/mac/Desktop/tokunbojames_erp/src/hooks/auth/useAuth.js"],"names":["useState","useReducer","toast","axios","LOGIN_URL","LOADING_STARTS","LOADING_STOPS","authReducers","useAuth","loginState","email","password","login","setLogin","isLoading","dispatch","onChange","e","name","value","target","loginUser","data","type","response","post","status","sessionStorage","setItem","token","localStorage","success","error","message"],"mappings":";;AAAA;;AACA;;AACA;AACA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,oBAA9C;AACA,SAASC,YAAT,QAA6B,4BAA7B;;AAEC,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACrB,QAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE,EADU;AAEjBC,IAAAA,QAAQ,EAAE;AAFO,GAAnB;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACS,UAAD,CAAlC;AAEA,QAAM,CAAC;AAAEK,IAAAA;AAAF,GAAD,EAAgBC,QAAhB,IAA4Bd,UAAU,CAACM,YAAD,EAAe;AACzDO,IAAAA,SAAS,EAAE;AAD8C,GAAf,CAA5C;;AAIA,QAAME,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAP,IAAAA,QAAQ,CAAC,EACP,GAAGD,KADI;AAEP,OAACM,IAAD,GAAQC;AAFD,KAAD,CAAR;AAID,GAND,CAZqB,CAoBrB;;;AACA,QAAME,SAAS,GAAG,MAAOC,IAAP,IAAgB;AAChCP,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAElB;AADC,KAAD,CAAR;;AAIA,QAAI;AACF,YAAMmB,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAN,CAAY,GAAErB,SAAU,EAAxB,EAA2BkB,IAA3B,CAAvB;;AACA,UAAIE,QAAQ,CAACF,IAAT,CAAcI,MAAd,KAAyB,IAA7B,EAAmC;AACjCC,QAAAA,cAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuCJ,QAAQ,CAACF,IAAT,CAAcA,IAAd,CAAmBO,KAA1D;AACAC,QAAAA,YAAY,CAACF,OAAb,CAAqB,cAArB,EAAqCJ,QAAQ,CAACF,IAAT,CAAcA,IAAd,CAAmBO,KAAxD;AACA3B,QAAAA,KAAK,CAAC6B,OAAN,CAAc,wBAAd;AAED;AACF,KARD,CAQE,OAAOd,CAAP,EAAU;AACV,UAAIA,CAAJ,EAAO;AACLF,QAAAA,QAAQ,CAAC;AACPQ,UAAAA,IAAI,EAAEjB;AADC,SAAD,CAAR;AAIAJ,QAAAA,KAAK,CAAC8B,KAAN,CAAY,uBAAZ;;AACA,YAAIf,CAAC,CAACO,QAAF,CAAWF,IAAX,CAAgBW,OAApB,EAA6B;AAC3BlB,UAAAA,QAAQ,CAAC;AACPQ,YAAAA,IAAI,EAAEjB;AADC,WAAD,CAAR;AAIAJ,UAAAA,KAAK,CAAC8B,KAAN,CAAYf,CAAC,CAACO,QAAF,CAAWF,IAAX,CAAgBW,OAA5B;AACD;AACF;AACF;AACF,GA7BD;;AA+BA,SAAO;AAAErB,IAAAA,KAAF;AAASI,IAAAA,QAAT;AAAmBK,IAAAA,SAAnB;AAA8BP,IAAAA;AAA9B,GAAP;AACD,CArDA;;GAAMN,O;;AAuDP,eAAeA,OAAf","sourcesContent":["// @ts-nocheck\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable import/prefer-default-export */\nimport { useState, useReducer } from 'react';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { LOGIN_URL } from 'url/auth/AuthUrl';\nimport { LOADING_STARTS, LOADING_STOPS } from 'types/LoadingTypes';\nimport { authReducers } from 'reducers/auth/authReducers';\n\n const useAuth = () => {\n  const loginState = {\n    email: '',\n    password: '',\n  };\n\n  const [login, setLogin] = useState(loginState);\n\n  const [{ isLoading }, dispatch] = useReducer(authReducers, {\n    isLoading: false,\n  });\n\n  const onChange = (e) => {\n    const { name, value } = e.target;\n    setLogin({\n      ...login,\n      [name]: value,\n    });\n  };\n\n  // eslint-disable-next-line consistent-return\n  const loginUser = async (data) => {\n    dispatch({\n      type: LOADING_STARTS,\n    });\n\n    try {\n      const response = await axios.post(`${LOGIN_URL}`, data);\n      if (response.data.status === 'OK') {\n        sessionStorage.setItem('Bearer_token', response.data.data.token);\n        localStorage.setItem('Bearer_token', response.data.data.token);\n        toast.success('Logged in successfully');\n\n      }\n    } catch (e) {\n      if (e) {\n        dispatch({\n          type: LOADING_STOPS,\n        });\n\n        toast.error('Something went wrong!');\n        if (e.response.data.message) {\n          dispatch({\n            type: LOADING_STOPS,\n          });\n\n          toast.error(e.response.data.message);\n        }\n      }\n    }\n  };\n\n  return { login, onChange, loginUser, isLoading };\n};\n\nexport default useAuth;"]},"metadata":{},"sourceType":"module"}