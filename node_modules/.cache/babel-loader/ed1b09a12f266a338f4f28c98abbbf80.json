{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\n\n/* eslint-disable no-underscore-dangle */\nimport { useState, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport * as types from 'types/auth/AuthTypes';\nimport { AuthReducers } from 'reducers/auth/AuthReducers';\nimport * as url from 'url/auth/AuthUrl'; // eslint-disable-next-line import/prefer-default-export\n\nexport const useAuth = () => {\n  _s();\n\n  const [{\n    isLoading,\n    isSuccess,\n    isSuccessMessage,\n    isFail,\n    isFailMessage,\n    token,\n    isError,\n    isErrorMessage\n  }, dispatch] = useReducer(AuthReducers, {\n    isLoading: false,\n    isSuccess: false,\n    isSuccessMessage: '',\n    isFail: false,\n    isFailMessage: '',\n    token: false\n  });\n  const loginState = {\n    email: '',\n    password: ''\n  };\n  const [login, setLogin] = useState(loginState);\n  /**\n   * to show th ebutton if the user is yet to agree to terms\n   */\n\n  const onLoginChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setLogin({ ...login,\n      [name]: value\n    });\n  };\n\n  const loginUser = async (user, history) => {\n    dispatch({\n      type: types.START_LOGIN_USER\n    });\n\n    if (user) {\n      const {\n        email,\n        password\n      } = user;\n      const data = {\n        email,\n        password\n      };\n\n      try {\n        const response = await axios.post(`${url.LOGIN_URL}`, data); // eslint-disable-next-line no-underscore-dangle\n\n        if (response.data.status === '') {\n          console.log(response.data.data.token); // eslint-disable-next-line no-underscore-dangle\n\n          sessionStorage.setItem('token', response.data.data.token);\n          sessionStorage.setItem('email', email);\n          setLogin(loginState);\n          history.push('/admin');\n          dispatch({\n            type: types.STOP_LOGIN_USER\n          });\n        }\n      } catch (e) {\n        if (e.response) {\n          if (e.response.data.message === 'Logged in successfully.') {\n            toast.error(e.response.data.message);\n            dispatch({\n              type: types.LOGIN_USER_FAIL\n            });\n          } else {\n            dispatch({\n              type: types.LOGIN_USER_FAIL,\n              payload: false\n            });\n          }\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   const checkIfLoggedIn = () => {\n  //     if (sessionStorage.getItem('token')) {\n  //       dispatch({\n  //         type: types.CHECK_IF_TOKEN_EXISTS,\n  //         payload: true,\n  //       });\n  //     }\n  //   };\n  //   checkIfLoggedIn();\n  // }, []);\n\n\n  return {\n    onLoginChange,\n    loginUser,\n    login,\n    isSuccess,\n    isSuccessMessage,\n    isFail,\n    isFailMessage,\n    isLoading,\n    token,\n    isError,\n    isErrorMessage\n  };\n};\n\n_s(useAuth, \"ve4vfEvd54wYH12bMV36a5uTJfw=\");","map":{"version":3,"sources":["/Users/mac/Desktop/tokunbojames_erp/src/hooks/auth/useAuth.js"],"names":["useState","useReducer","useEffect","axios","toast","types","AuthReducers","url","useAuth","isLoading","isSuccess","isSuccessMessage","isFail","isFailMessage","token","isError","isErrorMessage","dispatch","loginState","email","password","login","setLogin","onLoginChange","e","name","value","target","loginUser","user","history","type","START_LOGIN_USER","data","response","post","LOGIN_URL","status","console","log","sessionStorage","setItem","push","STOP_LOGIN_USER","message","error","LOGIN_USER_FAIL","payload"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable no-underscore-dangle */\nimport { useState, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport * as types from 'types/auth/AuthTypes';\nimport { AuthReducers } from 'reducers/auth/AuthReducers';\nimport * as url from 'url/auth/AuthUrl';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useAuth = () => {\n  const [\n    {\n      isLoading,\n      isSuccess,\n      isSuccessMessage,\n      isFail,\n      isFailMessage,\n      token,\n      isError,\n      isErrorMessage,\n    },\n    dispatch,\n  ] = useReducer(AuthReducers, {\n    isLoading: false,\n    isSuccess: false,\n    isSuccessMessage: '',\n    isFail: false,\n    isFailMessage: '',\n    token: false,\n  });\n  const loginState = { email: '', password: '' };\n\n  const [login, setLogin] = useState(loginState);\n\n  /**\n   * to show th ebutton if the user is yet to agree to terms\n   */\n\n   const onLoginChange = (e) => {\n    const { name, value } = e.target;\n    setLogin({\n      ...login,\n      [name]: value,\n    });\n  };\n\n\n  const loginUser = async (user, history) => {\n    dispatch({\n      type: types.START_LOGIN_USER,\n    });\n\n    if (user) {\n      const { email, password } = user;\n\n      const data = {\n        email,\n        password,\n      };\n\n      try {\n        const response = await axios.post(`${url.LOGIN_URL}`, data);\n        // eslint-disable-next-line no-underscore-dangle\n        if (response.data.status === '') {\n          console.log(response.data.data.token);\n          // eslint-disable-next-line no-underscore-dangle\n          sessionStorage.setItem('token', response.data.data.token);\n          sessionStorage.setItem('email', email);\n          setLogin(loginState);\n\n          history.push('/admin');\n          dispatch({\n            type: types.STOP_LOGIN_USER,\n          });\n        }\n      } catch (e) {\n        if (e.response) {\n          if (e.response.data.message === 'Logged in successfully.') {\n            toast.error(e.response.data.message);\n            dispatch({\n              type: types.LOGIN_USER_FAIL,\n            });\n          } else {\n            dispatch({\n              type: types.LOGIN_USER_FAIL,\n              payload: false,\n            });\n          }\n        }\n      }\n    }\n  };\n\n \n  // useEffect(() => {\n  //   const checkIfLoggedIn = () => {\n  //     if (sessionStorage.getItem('token')) {\n  //       dispatch({\n  //         type: types.CHECK_IF_TOKEN_EXISTS,\n  //         payload: true,\n  //       });\n  //     }\n  //   };\n\n  //   checkIfLoggedIn();\n  // }, []);\n  return {\n    onLoginChange,\n    loginUser,\n    login,\n    isSuccess,\n    isSuccessMessage,\n    isFail,\n    isFailMessage,\n    isLoading,\n    token,\n    isError,\n    isErrorMessage,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}